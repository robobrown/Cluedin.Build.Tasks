name: Package Extension

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      vsts_pat: ${{ secrets.PAT }}
    steps:
    - uses: actions/checkout@v3
    
    - name: fetch all history and tags from all branches for gitversion
      run: git fetch --prune --unshallow
      
    - name: install gitversion tool
      uses: gittools/actions/gitversion/setup@v0.9
      with:
          versionSpec: '5.x'
          
    - name: execute gitversion
      id: gitversion # step id used as a reference for output values
      uses: gittools/actions/gitversion/execute@v0.9
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml
      
    - name: print gitversion
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        
    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
      
    - name: update metadata in package.json
      uses: onlyutkarsh/patch-files-action@v1.0.1
      with:
        files: '${{github.workspace}}/BuildTasks/**/package.json'
        patch-syntax: |
          = /version => "${{ steps.gitversion.outputs.semVer }}"
          
    - name: update metadata in vss-extension.json
      uses: onlyutkarsh/patch-files-action@v1.0.1
      with:
        files: '${{github.workspace}}/vss-extension.json'
        patch-syntax: |
          = /version => "${{ steps.gitversion.outputs.semVer }}"

    - name: update metadata in task.json
      uses: onlyutkarsh/patch-files-action@v1.0.1
      with:
        files: '${{github.workspace}}/BuildTasks/**/task.json'
        patch-syntax: |
          = /version/Major => ${{ steps.gitversion.outputs.major }}
          = /version/Minor => ${{ steps.gitversion.outputs.minor }}
          = /version/Patch => ${{ steps.gitversion.outputs.patch }}

    - name: Package
      run: npm run package
      
    - name: print vsix path
      run: |
        echo "VSIX Path: ${{ env.vsix_path }}"

    - name: upload vsix as artifact
      uses: actions/upload-artifact@v1
      with:
        name: build-release-task-${{steps.gitversion.outputs.semVer}}.vsix
        path: ${{github.workspace}}/dist/robobrown.build-release-task-${{steps.gitversion.outputs.semVer}}.vsix

    # - name: create a release
    #   if: github.ref == 'refs/heads/main'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: v${{ steps.gitversion.outputs.semVer }}
    #     release_name: v${{ steps.gitversion.outputs.semVer }}

    # - name: publish to marketplace
    #   if: github.ref == 'refs/heads/main'
    #   run: npm run publish -- --vsix ${{github.workspace}}/dist/robobrown.build-release-task-${{steps.gitversion.outputs.semVer}}.vsix --token ${{ env.vsts_pat }}
